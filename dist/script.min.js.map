{"version":3,"sources":["script.js"],"names":["getProficiencyColor","proficiency","animateSkillBars","document","querySelectorAll","forEach","progress","getAttribute","skillBars","targetWidth","width","style","backgroundColor","setTimeout","addEventListener","skillsSection","querySelector","observer","IntersectionObserver","entries","entry","isIntersecting","threshold","observe","menu","navList","closeNav","classList","remove","e","stopPropagation","toggle","link","contains","target"],"mappings":"aACA,SAASA,oBAAoBC,GAD7B,OAAA,IAAAA,EAAA,UACSD,IAATC,EAA6BA,UACvBA,UAEJ,SAAOC,mBAGTC,SAAAC,iBAAA,mBAIYC,QAAQ,SAAAC,GAHpB,IAASJ,EAAAA,SAAmBI,EAAAC,aAAA,eACpBC,EAAYL,EAASC,IAIzBE,EAAMG,MAAWC,MAAGT,KAIpBK,EAASK,MAAMC,gBAAkBZ,oBAAoBC,GAGrDY,WAAW,WAAXA,EAAWF,MAAAD,MAAMD,GACfH,OAMNH,SAASW,iBAAiB,mBAAoB,WAC5CZ,mBAIA,IAAMa,EAAgBZ,SAASa,cAAc,WACvCC,EAAW,IAAIC,qBAAqB,SAAAC,GACxCA,EAAQd,QAAQ,SAAAe,GACVA,EAAMC,gBACRnB,sBAGH,CAAAoB,UAAA,KANHP,GASEE,EAASM,QAAQR,KAMrB,IAAMS,KAAOrB,SAASa,cAAc,gBAC9BS,QAAUtB,SAASa,cAAc,aAIrCS,SAAOC,WACRD,QAAAE,UAAAC,OAAA,UAGCC,KAAEC,iBADkC,QACf,SAAAD,GAArBA,EAAEC,kBACFL,QAAQE,UAAUI,OAAO,YAKzBC,QAAKlB,iBAAiB,KAAAT,QAASqB,SAAAA,GADjCM,EAIAlB,iBAAA,QAAAY,YAGIA,SAAAA,KAAQZ,iBAAA,QAAA,SAAAe,IACTJ,QAAAE,UAAAM,SAAA,WAAAR,QAAAQ,SAAAJ,EAAAK,SAAAV,KAAAS,SAAAJ,EAAAK,SAHHR","file":"script.min.js","sourcesContent":["// Function to get color based on proficiency\nfunction getProficiencyColor(proficiency) {\n  if (proficiency >= 80) return '#10b981'; // Green for high proficiency\n  if (proficiency >= 60) return '#f59e0b'; // Yellow for medium proficiency\n  return '#ef4444'; // Red for low proficiency\n}\n\n// Function to animate skill bars\nfunction animateSkillBars() {\n  const skillBars = document.querySelectorAll('.skill-progress');\n  \n  skillBars.forEach(progress => {\n    const proficiency = parseInt(progress.getAttribute('data-width'));\n    const targetWidth = proficiency + '%';\n    \n    // Set initial state\n    progress.style.width = '0%';\n    progress.style.backgroundColor = getProficiencyColor(proficiency);\n    \n    // Animate after a short delay\n    setTimeout(() => {\n      progress.style.width = targetWidth;\n    }, 100);\n  });\n}\n\n// Initialize animations when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Animate skill bars\n  animateSkillBars();\n  \n  // Optional: Re-animate when skills section comes into view\n  const skillsSection = document.querySelector('#skills');\n  const observer = new IntersectionObserver((entries) => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        animateSkillBars();\n      }\n    });\n  }, { threshold: 0.2 });\n  \n  if (skillsSection) {\n    observer.observe(skillsSection);\n  }\n});\n\n\n// Toggle navigation on mobile screen\nconst menu = document.querySelector('.menu-toggle');\nconst navList = document.querySelector('.nav-list');\n\n// Close nav when a link is clicked or when clicking outside the nav\nfunction closeNav() {\n  navList.classList.remove('active');\n}\n\nmenu.addEventListener('click', (e) => {\n  e.stopPropagation(); // Prevent body click from firing\n  navList.classList.toggle('active');\n});\n\n// Close menu when a nav link is clicked\nnavList.querySelectorAll('a').forEach(link => {\n  link.addEventListener('click', closeNav);\n});\n\n// Close menu when clicking outside nav/menu\ndocument.body.addEventListener('click', (e) => {\n  if (navList.classList.contains('active') && !navList.contains(e.target) && !menu.contains(e.target)) {\n    closeNav();\n  }\n});"]}